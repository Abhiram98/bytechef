/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.12.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.bytechef.ee.embedded.configuration.public_.web.rest;

import com.bytechef.ee.embedded.configuration.public_.web.rest.model.CreateProjectWorkflowRequestModel;
import com.bytechef.ee.embedded.configuration.public_.web.rest.model.EnvironmentModel;
import com.bytechef.ee.embedded.configuration.public_.web.rest.model.WorkflowModel;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-26T08:51:43.780222+02:00[Europe/Zagreb]", comments = "Generator version: 7.12.0")
@Validated
@Tag(name = "workflow", description = "The Embedded Workflow Public API")
public interface WorkflowApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /projects/{externalUserId}/workflows : Create new workflow and adds it to an existing integration
     * Create new workflow and adds it to an existing integration.
     *
     * @param externalUserId The external user id. (required)
     * @param createProjectWorkflowRequestModel  (required)
     * @param xEnvironment The environment. (optional)
     * @return The project workflow reference code. (status code 200)
     */
    @Operation(
        operationId = "createProjectWorkflow",
        summary = "Create new workflow and adds it to an existing integration",
        description = "Create new workflow and adds it to an existing integration.",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The project workflow reference code.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/projects/{externalUserId}/workflows",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> createProjectWorkflow(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "CreateProjectWorkflowRequestModel", description = "", required = true) @Valid @RequestBody CreateProjectWorkflowRequestModel createProjectWorkflowRequestModel,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) EnvironmentModel xEnvironment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /projects/{externalUserId}/workflows/{workflowReferenceCode} : Delete a workflow
     * Delete a workflow.
     *
     * @param externalUserId The external user id. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "deleteProjectWorkflow",
        summary = "Delete a workflow",
        description = "Delete a workflow.",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/projects/{externalUserId}/workflows/{workflowReferenceCode}"
    )
    
    default ResponseEntity<Void> deleteProjectWorkflow(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{externalUserId}/workflows/{workflowReferenceCode} : Get a workflow by workflow reference code
     * Get a workflow by workflow reference code.
     *
     * @param externalUserId The external user id. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @return The workflow object. (status code 200)
     */
    @Operation(
        operationId = "getProjectWorkflow",
        summary = "Get a workflow by workflow reference code",
        description = "Get a workflow by workflow reference code.",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The workflow object.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkflowModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{externalUserId}/workflows/{workflowReferenceCode}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<WorkflowModel> getProjectWorkflow(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"description\" : \"description\", \"label\" : \"label\", \"workflowReferenceCode\" : \"workflowReferenceCode\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /projects/{externalUserId}/workflows : Get automation workflows for particular external user
     * Get automation workflows for particular external user.
     *
     * @param externalUserId The external user id. (required)
     * @param xEnvironment The environment. (optional)
     * @return The updated integration object. (status code 200)
     */
    @Operation(
        operationId = "getProjectWorkflows",
        summary = "Get automation workflows for particular external user",
        description = "Get automation workflows for particular external user.",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "200", description = "The updated integration object.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WorkflowModel.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/projects/{externalUserId}/workflows",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<WorkflowModel>> getProjectWorkflows(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "X-Environment", description = "The environment.", in = ParameterIn.HEADER) @RequestHeader(value = "X-Environment", required = false) EnvironmentModel xEnvironment
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"description\" : \"description\", \"label\" : \"label\", \"workflowReferenceCode\" : \"workflowReferenceCode\" }, { \"description\" : \"description\", \"label\" : \"label\", \"workflowReferenceCode\" : \"workflowReferenceCode\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /projects/{externalUserId}/workflows/{workflowReferenceCode} : Update an existing workflow
     * Update an existing workflow.
     *
     * @param externalUserId The external user id. (required)
     * @param workflowReferenceCode The workflow reference of the workflow to delete. (required)
     * @param createProjectWorkflowRequestModel  (required)
     * @return Successful operation. (status code 204)
     */
    @Operation(
        operationId = "updateProjectWorkflow",
        summary = "Update an existing workflow",
        description = "Update an existing workflow.",
        tags = { "workflow" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful operation.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/projects/{externalUserId}/workflows/{workflowReferenceCode}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateProjectWorkflow(
        @Parameter(name = "externalUserId", description = "The external user id.", required = true, in = ParameterIn.PATH) @PathVariable("externalUserId") String externalUserId,
        @Parameter(name = "workflowReferenceCode", description = "The workflow reference of the workflow to delete.", required = true, in = ParameterIn.PATH) @PathVariable("workflowReferenceCode") String workflowReferenceCode,
        @Parameter(name = "CreateProjectWorkflowRequestModel", description = "", required = true) @Valid @RequestBody CreateProjectWorkflowRequestModel createProjectWorkflowRequestModel
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
